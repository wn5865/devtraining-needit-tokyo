<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>45cf8914eb320110f7e105a3a25228ab</includes>
        <macroponent display_value="DA Modal Ref Tree Pick Lookup">06d97eeb97c92110c18076021153afc5</macroponent>
        <name>Expand item</name>
        <preset/>
        <required_translations/>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
async function handler({ api, event, helpers, imports }) {
	const {
		parseGroupTree,
		parseGeneralTree,
		parseCITree,
		addNewChild,
		generateRequestURL
	} = imports['global.Content Tree Utils']();

	const {
		props: { table, referenceTable, referenceField, dependentField, query }
	} = api.context;
	const { item, path } = event.payload;
	let nameSuffix = 'parent';
	let type = 'child';
	const name = `${item.class}.${nameSuffix}`;
	const {
		treePickerConfig: { processor, targetValue },
		domainID
	} = api.data.tree_picker.treePicker;
	const reference = `${table}.${referenceField}`;
	const target =
		dependentField === ''
			? `${item.class}.undefined`
			: `${item.class}.${dependentField}`;

	api.setState('loadingItems', [
		{
			path: path,
			erorr: false
		}
	]);
	helpers
		.snHttp(
			generateRequestURL(
				processor,
				name,
				type,
				item.id,
				reference,
				target,
				targetValue,
				domainID,
				query
			),
			{
				method: 'POST',
				batch: false,
				body: {},
				headers: {
					'X-WantSessionNotificationMessages': 'true',
					'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
				}
			}
		)
		.then(async ({ response }) => {
			const xml = Object.values(response).join('');
			let treeJSON;
			if (referenceTable === 'sys_user_group') {
				treeJSON = parseGroupTree(xml, item);
				const newTreeJSON = addNewChild(
					api.state.treeItems[0],
					path,
					treeJSON,
					0
				);
				api.setState('treeItems', [newTreeJSON]);
			} else if (referenceTable === 'cmdb_ci') {
				treeJSON = await parseCITree(xml, path, targetValue, helpers);
				let newTreeJSON = {};
				if (item.relType === 'child') {
					newTreeJSON = addNewChild(api.state.treeItems[0], path, treeJSON[0]);
					api.setState('treeItems', [newTreeJSON, [...api.state.treeItems[1]]]);
					api.emit('SELECTED_ITEM', {
						treeJSON: treeJSON[0],
						parentId: item.id
					});
				} else {
					newTreeJSON = addNewChild(api.state.treeItems[1], path, treeJSON[1]);
					api.setState('treeItems', [[...api.state.treeItems[0]], newTreeJSON]);
					api.emit('SELECTED_ITEM', {
						treeJSON: treeJSON[1],
						parentId: item.id
					});
				}
			} else {
				treeJSON = parseGeneralTree(xml);
				const newTreeJSON = addNewChild(
					api.state.treeItems[0],
					path,
					treeJSON,
					0
				);
				api.setState('treeItems', [newTreeJSON]);
			}
			api.setState('loadingItems', []);
		});
}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-22 15:38:56</sys_created_on>
        <sys_id>8bd9beeb97c92110c18076021153aff7</sys_id>
        <sys_name>Expand item</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_8bd9beeb97c92110c18076021153aff7</sys_update_name>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
